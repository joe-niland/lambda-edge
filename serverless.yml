service: edge-poc

# plugins:
# - serverless-python-requirements

custom:
  os:
    mac:
      dockerizePip: non-linux
    linux:
      dockerizePip: false

  pythonRequirements:
    dockerizePip: ${self:custom.os.${opt:os, "mac"}.dockerizePip}

package:
  individually: true
  patterns:
    - "!README.md"
    - "!.git/**"
    - "!package*.json"
    - "!venv/**"
    - "!node_modules/**"
    - '!\*.egg-info/**'
    - '!\*.dist-info/**'
    - "!tests/**"
    - "!payloads/**"

provider:
  name: aws
  runtime: python3.8
  region: us-east-1

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource:
        - "*"

functions:
  viewerRequest:
    name: viewerRequestPOC
    handler: handler.viewerRequest
    timeout: 5
    events:
      - cloudFront:
          eventType: viewer-request
          pathPattern: /view*
          origin:
            DomainName: www.truescope.com
            # OriginPath: /
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
  originRequest:
    name: originRequestPOC
    handler: handler.originRequest
    timeout: 30
    events:
      - cloudFront:
          eventType: origin-request
          pathPattern: /origin*
          origin:
            DomainName: www.truescope.com
            # OriginPath: /
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer
  # originRequest:
  #   handler: handler.originRequest
  #   timeout: 5
  #   lambdaAtEdge:
  #     distribution: lambdaEdgeExperimentDistribution
  #     eventType: origin-request
  # originResponse:
  #   handler: handler.originResponse
  #   timeout: 5
  #   lambdaAtEdge:
  #     distribution: lambdaEdgeExperimentDistribution
  #     eventType: origin-response
  # viewerResponse:
  #   handler: handler.viewerResponse
  #   timeout: 5
  #   lambdaAtEdge:
  #     distribution: lambdaEdgeExperimentDistribution
  #     eventType: viewer-response
# resources: # CloudFormation template syntax from here on.
#   Resources:
#     lambdaEdgeRole:
#       Type: AWS::IAM::Role
#       Properties:
#         RoleName: lambda-edge-test-role
#         AssumeRolePolicyDocument:
#           Version: "2012-10-17"
#           Statement:
#             - Effect: "Allow"
#               Principal:
#                 Service:
#                   - edgelambda.amazonaws.com
#                   - lambda.amazonaws.com
#               Action: sts:AssumeRole
#         Policies:
#           - PolicyName: lambda-edge-policy
#             PolicyDocument:
#               Version: "2012-10-17"
#               Statement:
#                 - Effect: "Allow"
#                   Action:
#                     - "dynamodb:*"
#                     - "dynamodb:*"
#                     - "cloudfront:*"
#                     - "lambda:*"
#                     - "logs:*"
#                   Resource: "*"
# resources:
#   Resources:
#     lambdaEdgeExperimentDistribution:
#       Type: AWS::CloudFront::Distribution
#       Properties:
#         DistributionConfig:
#           Origins:
#             - Id: DefaultOrigin
#               DomainName: example.com
#               CustomOriginConfig:
#                 HTTPPort: "80"
#                 HTTPSPort: "443"
#                 OriginProtocolPolicy: http-only
#           Enabled: true
#           Comment: Lambda Edge Experiment
#           DefaultCacheBehavior:
#             TargetOriginId: DefaultOrigin
#             ViewerProtocolPolicy: allow-all
#             DefaultTTL: 300
#             MinTTL: 300
#             MaxTTL: 300
#             Compress: true
#             ForwardedValues:
#               QueryString: true
#               Cookies:
#                 Forward: none
#           PriceClass: PriceClass_200
#           HttpVersion: http2
